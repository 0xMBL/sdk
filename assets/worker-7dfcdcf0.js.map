{"version":3,"file":"worker-7dfcdcf0.js","sources":["../node_modules/@aleohq/wasm/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js","../node_modules/@aleohq/wasm/aleo_wasm.js","../src/workers/keys.js","../src/workers/worker.js"],"sourcesContent":["/*\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  if (builder.numThreads() === 0) {\n    throw new Error(`num_threads must be > 0.`);\n  }\n\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker('../../..');\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n","import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h660130c9d44ece0c(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_216(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h2d5f33f2057d5c7d(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nexport class ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Create a private key from a string representation\n    *\n    * This function will fail if the text is not a valid private key\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key\n    *\n    * This function should be used very carefully as it exposes the private key plaintext\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a private key ciphertext using a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt the private key with a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext using a secret.\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nexport class PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely.\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_encryptPrivateKey(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string.\n    *\n    * This must be the same secret used to encrypt the private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nexport class Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get javascript array of functions names in the program\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a webform to capture user inputs for an execution of a function.\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class ProgramManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProgramManager.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {ExecutionResponse}\n    */\n    execute_local(private_key, program, _function, inputs, cache, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            var ptr0 = private_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            let ptr3 = 0;\n            if (!isLikeNone(proving_key)) {\n                _assertClass(proving_key, ProvingKey);\n                ptr3 = proving_key.__destroy_into_raw();\n            }\n            let ptr4 = 0;\n            if (!isLikeNone(verifying_key)) {\n                _assertClass(verifying_key, VerifyingKey);\n                ptr4 = verifying_key.__destroy_into_raw();\n            }\n            wasm.programmanager_execute_local(retptr, this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), cache, ptr3, ptr4);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExecutionResponse.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    execute(private_key, program, _function, inputs, fee_credits, fee_record, url, cache, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr5 = proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr6 = verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_execute(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `transfer_proving_key` and `transfer_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param transfer_proving_key (optional) Provide a proving key to use for the transfer\n    * function\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    transfer(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, cache, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr4 = fee_record.__destroy_into_raw();\n        const ptr5 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_transfer(this.__wbg_ptr, ptr0, amount_credits, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, cache, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form {\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} _url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    deploy(private_key, program, imports, fee_credits, fee_record, _url, cache, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr2 = fee_record.__destroy_into_raw();\n        const ptr3 = passStringToWasm0(_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr4 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr5 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_deploy(this.__wbg_ptr, ptr0, ptr1, len1, isLikeNone(imports) ? 0 : addHeapObject(imports), fee_credits, ptr2, ptr3, len3, cache, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `split_proving_key` and `split_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    split(private_key, split_amount, amount_record, url, cache, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr1 = amount_record.__destroy_into_raw();\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr3 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr4 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_split(this.__wbg_ptr, ptr0, split_amount, ptr1, ptr2, len2, cache, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `join_proving_key` and `join_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    join(private_key, record_1, record_2, fee_credits, fee_record, url, cache, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(record_1, RecordPlaintext);\n        var ptr1 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr2 = record_2.__destroy_into_raw();\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr5 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr6 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_join(this.__wbg_ptr, ptr0, ptr1, ptr2, fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.programmanager_new();\n        return ProgramManager.__wrap(ret);\n    }\n    /**\n    * Cache the proving and verifying keys for a program function in WASM memory. This method\n    * will take a verifying and proving key and store them in the program manager's internal\n    * in-memory cache. This memory is allocated in WebAssembly, so it is important to be mindful\n    * of the amount of memory being used. This method will return an error if the keys are already\n    * cached in memory.\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function The name of the function to store the keys for\n    * @param proving_key The proving key of the function\n    * @param verifying_key The verifying key of the function\n    * @param {string} program\n    * @param {string} _function\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    cacheKeypairInWasmMemory(program, _function, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proving_key, ProvingKey);\n            var ptr2 = proving_key.__destroy_into_raw();\n            _assertClass(verifying_key, VerifyingKey);\n            var ptr3 = verifying_key.__destroy_into_raw();\n            wasm.programmanager_cacheKeypairInWasmMemory(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, ptr3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the proving & verifying keys cached in WASM memory for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    getCachedKeypair(program_id, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_getCachedKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Synthesize a proving and verifying key for a program function. This method should be used\n    * when there is a need to pre-synthesize keys (i.e. for caching purposes, etc.)\n    *\n    * @param program The source code of the program containing the desired function\n    * @param function The name of the function to synthesize the key for\n    * @param {string} program\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    synthesizeKeypair(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_synthesizeKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Clear key cache in wasm memory.\n    *\n    * This method will clear the key cache in wasm memory. It is important to note that this will\n    * not DE-allocate the memory assigned to wasm as wasm memory cannot be shrunk. The total\n    * memory allocated to wasm will remain constant but will be available for other usage after\n    * calling this method.\n    */\n    clearKeyCache() {\n        wasm.programmanager_clearKeyCache(this.__wbg_ptr);\n    }\n    /**\n    * Check if the cache contains a keypair for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} function_id\n    * @returns {boolean}\n    */\n    keyExists(program_id, function_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_keyExists(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nexport class RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Return a record ciphertext from a string.\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the record ciphertext string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key.\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns `true` if the view key can decrypt the record ciphertext.\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Aleo record plaintext\n*/\nexport class RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.viewkey_from_private_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.viewkey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_log_bcdbad8373c39b16 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_fetch_57429b87be3dcc33 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_216(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7008 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1180, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7010 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1180, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:122,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('aleo_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n","const FEE_PROVER_URL = \"https://testnet3.parameters.aleo.org/fee.prover.0bfc24f\";\nconst FEE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/fee.verifier.44783e8\";\nconst JOIN_PROVER_URL = \"https://testnet3.parameters.aleo.org/join.prover.6856be2\";\nconst JOIN_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/join.verifier.9c946a3\";\nconst SPLIT_PROVER_URL = \"https://testnet3.parameters.aleo.org/split.prover.8469bca\";\nconst SPLIT_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/split.verifier.ba3bdd9\";\nconst TRANSFER_PRIVATE_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer.prover.2a9a6f2\";\nconst TRANSFER_PRIVATE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer.verifier.3a59762\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_private_to_public.prover.cf3b952\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_private_to_public.verifier.5bd459b\";\nconst TRANSFER_PUBLIC_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_public.prover.1117f0a\";\nconst TRANSFER_PUBLIC_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_public.verifier.d63af11\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL = \"https://testnet3.parameters.aleo.org/transfer_public_to_private.prover.7b763af\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL = \"https://testnet3.parameters.aleo.org/transfer_public_to_private.verifier.25f6542\";\n\nexport {FEE_PROVER_URL, FEE_VERIFIER_URL, JOIN_PROVER_URL, JOIN_VERIFIER_URL, SPLIT_PROVER_URL, SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL, TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL, TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL, TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL};","import init, * as aleo from '@aleohq/wasm';\nimport { FEE_PROVER_URL, FEE_VERIFIER_URL, JOIN_PROVER_URL, JOIN_VERIFIER_URL, SPLIT_PROVER_URL, SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL, TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL,\nTRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL, TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL} from './keys';\n\nlet feeProvingKey = null;\nlet feeVerifyingKey = null;\nlet joinProvingKey = null;\nlet joinVerifyingKey = null;\nlet splitProvingKey = null;\nlet splitVerifyingKey = null;\nlet transferPrivateProvingKey = null;\nlet transferPrivateVerifyingKey = null;\nlet transferPrivateToPublicProvingKey = null;\nlet transferPrivateToPublicVerifyingKey = null;\nlet transferPublicProvingKey = null;\nlet transferPublicVerifyingKey = null;\nlet transferPublicToPrivateProvingKey = null;\nlet transferPublicToPrivateVerifyingKey = null;\n\nawait init();\nawait aleo.initThreadPool(10);\nconst aleoProgramManager = new aleo.ProgramManager();\n\nconst getFunctionKeys = async (proverUrl, verifierUrl) => {\n    console.log(\"Downloading proving and verifying keys from: \", proverUrl, verifierUrl);\n    let proofResponse = await fetch(proverUrl);\n    let proofBuffer = await proofResponse.arrayBuffer();\n    let verificationResponse = await fetch(verifierUrl);\n    let verificationBuffer = await verificationResponse.arrayBuffer();\n    let provingKey = aleo.ProvingKey.fromBytes(new Uint8Array(proofBuffer));\n    let verifyingKey = aleo.VerifyingKey.fromBytes(new Uint8Array(verificationBuffer));\n    return [provingKey, verifyingKey];\n}\n\nconst validateProgram = (programString) => {\n    try {\n        return aleo.Program.fromString(programString);\n    } catch (error) {\n        console.log(error);\n        throw (`Program input is not a valid Aleo program`);\n    }\n}\n\nconst programMatchesOnChain = async (programString) => {\n    const program = validateProgram(programString);\n    let onlineProgramText;\n    try {\n        const program_id = program.id();\n        const program_url = `https://vm.aleo.org/api/testnet3/program/${program_id}`;\n        const programResponse = await fetch(program_url);\n        onlineProgramText = await programResponse.json();\n    } catch (error) {\n        console.log(error);\n        throw (`Program does not exist on chain`);\n    }\n\n    try {\n        const onlineProgram = aleo.Program.fromString(onlineProgramText);\n        return program.isEqual(onlineProgram);\n    } catch (error) {\n        console.log(error);\n        throw (`Could not parse program from chain`);\n    }\n}\nlet lastLocalProgram = null;\n\nself.addEventListener(\"message\", ev => {\n    if (ev.data.type === 'ALEO_EXECUTE_PROGRAM_LOCAL') {\n        const {\n            localProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n        } = ev.data;\n\n        console.log('Web worker: Executing function locally...');\n        let startTime = performance.now();\n\n        try {\n            validateProgram(localProgram);\n\n            if (lastLocalProgram === null) {\n                lastLocalProgram = localProgram;\n            } else if (lastLocalProgram !== localProgram) {\n                aleoProgramManager.clearKeyCache();\n                lastLocalProgram = localProgram;\n            }\n\n            let response = aleoProgramManager.execute_local(\n                aleo.PrivateKey.from_string(privateKey),\n                localProgram,\n                aleoFunction,\n                inputs,\n                true\n            );\n\n            console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n            let outputs = response.getOutputs();\n            console.log(`Function execution response: ${outputs}`);\n            self.postMessage({type: 'OFFLINE_EXECUTION_COMPLETED', outputs});\n        } catch (error) {\n            console.log(error);\n            self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n        }\n    }\n    else if (ev.data.type === 'ALEO_EXECUTE_PROGRAM_ON_CHAIN') {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating execution...');\n        let startTime = performance.now();\n\n        (async function() {\n            try {\n                const programMatches = await programMatchesOnChain(remoteProgram);\n                if (!programMatches) {\n                    throw (`Program does not match the program deployed on the Aleo Network, cannot execute`);\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let executeTransaction = await aleoProgramManager.execute(\n                    aleo.PrivateKey.from_string(privateKey),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                let transaction = executeTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'EXECUTION_TRANSACTION_COMPLETED', executeTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_TRANSFER') {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating transfer...');\n        let startTime = performance.now();\n\n        (async function() {\n            try {\n                if (transfer_type === \"public\") {\n                    if (transferPublicProvingKey === null || transferPublicVerifyingKey === null) {\n                        [transferPublicProvingKey, transferPublicVerifyingKey] = await getFunctionKeys(TRANSFER_PUBLIC_PROVER_URL, TRANSFER_PUBLIC_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"private\") {\n                    if (transferPrivateProvingKey === null || transferPrivateVerifyingKey === null) {\n                        [transferPrivateProvingKey, transferPrivateVerifyingKey] = await getFunctionKeys(TRANSFER_PRIVATE_PROVER_URL, TRANSFER_PRIVATE_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"publicToPrivate\") {\n                    if (transferPublicToPrivateProvingKey === null || transferPublicToPrivateVerifyingKey === null) {\n                        [transferPublicToPrivateProvingKey, transferPublicToPrivateVerifyingKey] = await getFunctionKeys(TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL, TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL);\n                    }\n                } else if (transfer_type === \"privateToPublic\") {\n                    if (transferPrivateToPublicProvingKey === null || transferPrivateToPublicVerifyingKey === null) {\n                        [transferPrivateToPublicProvingKey, transferPrivateToPublicVerifyingKey] = await getFunctionKeys(TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL, TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL);\n                    }\n                } else {\n                    throw (`Invalid transfer type`);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"transfer\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"transfer\", transferPrivateProvingKey, transferPrivateVerifyingKey);\n                }\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let transferTransaction = await aleoProgramManager.transfer(\n                    aleo.PrivateKey.from_string(privateKey),\n                    amountCredits,\n                    recipient,\n                    \"transfer_private\",\n                    aleo.RecordPlaintext.fromString(amountRecord),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Transfer transaction created in ${performance.now() - startTime} ms`);\n                let transaction = transferTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'TRANSFER_TRANSACTION_COMPLETED', transferTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_DEPLOY') {\n        const {\n            program,\n            privateKey,\n            fee,\n            feeRecord,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating deployment...');\n\n        let startTime = performance.now();\n        (async function() {\n            try {\n                try {\n                    await programMatchesOnChain(program);\n                    throw (`A program with the same name already exists on the Aleo Network, cannot deploy`);\n                } catch (e) {\n                    if (e !== `Program does not exist on chain`) {\n                        throw e;\n                    }\n                    console.log(`Program not found on the Aleo Network - proceeding with deployment...`);\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n                }\n\n                let deployTransaction = await aleoProgramManager.deploy(\n                    aleo.PrivateKey.from_string(privateKey),\n                    program,\n                    undefined,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Deployment transaction created in ${performance.now() - startTime} ms`);\n                let transaction = deployTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'DEPLOY_TRANSACTION_COMPLETED', deployTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_SPLIT') {\n        const {\n            splitAmount,\n            record,\n            privateKey,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating split...');\n\n        let startTime = performance.now();\n        (async function() {\n            try {\n                if (splitProvingKey === null || splitVerifyingKey === null) {\n                    [splitProvingKey, splitVerifyingKey] = await getFunctionKeys(SPLIT_PROVER_URL, SPLIT_VERIFIER_URL);\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"split\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"split\", splitProvingKey, splitVerifyingKey);\n                }\n                let splitTransaction = await aleoProgramManager.split(\n                    aleo.PrivateKey.from_string(privateKey),\n                    splitAmount,\n                    aleo.RecordPlaintext.fromString(record),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Split transaction created in ${performance.now() - startTime} ms`);\n                let transaction = splitTransaction.toString();\n                console.log(transaction);\n                self.postMessage({type: 'SPLIT_TRANSACTION_COMPLETED', splitTransaction: transaction});\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n    else if (ev.data.type === 'ALEO_JOIN') {\n        const {\n            recordOne,\n            recordTwo,\n            fee,\n            feeRecord,\n            privateKey,\n            url\n        } = ev.data;\n\n        console.log('Web worker: Creating join...');\n\n        let startTime = performance.now();\n        (async function() {\n            if (joinProvingKey === null || joinVerifyingKey === null) {\n                [joinProvingKey, joinVerifyingKey] = await getFunctionKeys(JOIN_PROVER_URL, JOIN_VERIFIER_URL);\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"join\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"join\", joinProvingKey, joinVerifyingKey);\n            }\n            if (feeProvingKey === null || feeVerifyingKey === null) {\n                [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(FEE_PROVER_URL, FEE_VERIFIER_URL);\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(aleo.Program.getCreditsProgram().toString(), \"fee\", feeProvingKey, feeVerifyingKey);\n            }\n\n            try {\n                let joinTransaction = await aleoProgramManager.join(\n                    aleo.PrivateKey.from_string(privateKey),\n                    aleo.RecordPlaintext.fromString(recordOne),\n                    aleo.RecordPlaintext.fromString(recordTwo),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true\n                );\n\n                console.log(`Web worker: Join transaction created in ${performance.now() - startTime} ms`);\n                let transaction = joinTransaction.toString();\n                console.log(transaction);\n                self.postMessage({ type: 'JOIN_TRANSACTION_COMPLETED', joinTransaction: transaction });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({ type: 'ERROR', errorMessage: error.toString() });\n            }\n        })();\n    }\n});"],"names":["waitForMsgType","target","type","resolve","onMsg","data","pkg","startWorkers","module","memory","builder","workerInit","worker","wasm","cachedTextDecoder","cachedUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","len","heap","heap_next","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","debugString","val","description","name","length","debug","builtInMatches","className","makeMutClosure","arg0","arg1","dtor","f","state","real","args","a","__wbg_adapter_32","arg2","passArray8ToWasm0","getArrayU8FromWasm0","_assertClass","instance","klass","handleError","__wbg_adapter_216","arg3","initThreadPool","num_threads","wbg_rayon_start_worker","receiver","Address","private_key","PrivateKey","view_key","ViewKey","address","ptr0","len0","deferred1_0","deferred1_1","retptr","r0","r1","message","signature","Signature","ExecutionResponse","KeyPair","proving_key","verifying_key","ProvingKey","VerifyingKey","ptr1","r2","seed","secret","PrivateKeyCiphertext","ciphertext","Program","program","function_name","record_name","struct_name","other","ProgramManager","_function","inputs","cache","len1","ptr2","len2","ptr3","ptr4","fee_credits","fee_record","url","fee_proving_key","fee_verifying_key","RecordPlaintext","len4","ptr5","ptr6","ptr7","ptr8","amount_credits","recipient","transfer_type","amount_record","transfer_proving_key","transfer_verifying_key","len5","ptr9","imports","_url","len3","split_amount","split_proving_key","split_verifying_key","record_1","record_2","join_proving_key","join_verifying_key","program_id","function_id","bytes","r3","v1","RecordCiphertext","record","deferred4_0","deferred4_1","Transaction","transaction","deferred3_0","deferred3_1","wbg_rayon_PoolBuilder","__wbg_load","e","__wbg_get_imports","deferred0_0","deferred0_1","arg4","arg5","result","state0","cb0","__wbg_init","__wbg_init_memory","maybe_memory","__wbg_finalize_init","initSync","input","FEE_PROVER_URL","FEE_VERIFIER_URL","JOIN_PROVER_URL","JOIN_VERIFIER_URL","SPLIT_PROVER_URL","SPLIT_VERIFIER_URL","TRANSFER_PRIVATE_PROVER_URL","TRANSFER_PRIVATE_VERIFIER_URL","TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL","TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_PROVER_URL","TRANSFER_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL","TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL","feeProvingKey","feeVerifyingKey","joinProvingKey","joinVerifyingKey","splitProvingKey","splitVerifyingKey","transferPrivateProvingKey","transferPrivateVerifyingKey","transferPrivateToPublicProvingKey","transferPrivateToPublicVerifyingKey","transferPublicProvingKey","transferPublicVerifyingKey","transferPublicToPrivateProvingKey","transferPublicToPrivateVerifyingKey","init","aleo.initThreadPool","aleoProgramManager","aleo.ProgramManager","getFunctionKeys","proverUrl","verifierUrl","proofBuffer","verificationBuffer","provingKey","aleo.ProvingKey","verifyingKey","aleo.VerifyingKey","validateProgram","programString","aleo.Program","error","programMatchesOnChain","onlineProgramText","program_url","onlineProgram","lastLocalProgram","ev","localProgram","aleoFunction","privateKey","startTime","response","aleo.PrivateKey","outputs","remoteProgram","fee","feeRecord","executeTransaction","aleo.RecordPlaintext","amountCredits","amountRecord","transferTransaction","deployTransaction","splitAmount","splitTransaction","recordOne","recordTwo","joinTransaction"],"mappings":"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","x_google_ignoreList":[0,1]}