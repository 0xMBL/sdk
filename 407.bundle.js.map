{"version":3,"file":"407.bundle.js","mappings":"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","sources":["webpack://aleo-website/../wasm/pkg-parallel/aleo_wasm.js"],"sourcesContent":["import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h282db0332f5ea9ca(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_228(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h3a94758921d57ad1(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n* Public address of an Aleo account\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nexport class ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nexport class PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_encryptPrivateKey(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nexport class Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class ProgramManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProgramManager.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `join_proving_key` and `join_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    join(private_key, record_1, record_2, fee_credits, fee_record, url, cache, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(record_1, RecordPlaintext);\n        var ptr1 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr2 = record_2.__destroy_into_raw();\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr5 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr6 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_join(this.__wbg_ptr, ptr0, ptr1, ptr2, fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {ExecutionResponse}\n    */\n    execute_local(private_key, program, _function, inputs, cache, imports, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            var ptr0 = private_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            let ptr3 = 0;\n            if (!isLikeNone(proving_key)) {\n                _assertClass(proving_key, ProvingKey);\n                ptr3 = proving_key.__destroy_into_raw();\n            }\n            let ptr4 = 0;\n            if (!isLikeNone(verifying_key)) {\n                _assertClass(verifying_key, VerifyingKey);\n                ptr4 = verifying_key.__destroy_into_raw();\n            }\n            wasm.programmanager_execute_local(retptr, this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExecutionResponse.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    execute(private_key, program, _function, inputs, fee_credits, fee_record, url, cache, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr5 = proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr6 = verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_execute(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), fee_credits, ptr3, ptr4, len4, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {Promise<bigint>}\n    */\n    estimateExecutionFee(private_key, program, _function, inputs, url, cache, imports, proving_key, verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), ptr3, len3, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `split_proving_key` and `split_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    split(private_key, split_amount, amount_record, url, cache, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr1 = amount_record.__destroy_into_raw();\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr3 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr4 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_split(this.__wbg_ptr, ptr0, split_amount, ptr1, ptr2, len2, cache, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the synthesized keys for future use\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    deploy(private_key, program, fee_credits, fee_record, url, cache, imports, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr2 = fee_record.__destroy_into_raw();\n        const ptr3 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr4 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr5 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_deploy(this.__wbg_ptr, ptr0, ptr1, len1, fee_credits, ptr2, ptr3, len3, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param cache Cache the synthesized keys for future use\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    estimateDeploymentFee(program, cache, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(this.__wbg_ptr, ptr0, len0, cache, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.programmanager_new();\n        return ProgramManager.__wrap(ret);\n    }\n    /**\n    * Cache the proving and verifying keys for a program function in WASM memory. This method\n    * will take a verifying and proving key and store them in the program manager's internal\n    * in-memory cache. This memory is allocated in WebAssembly, so it is important to be mindful\n    * of the amount of memory being used. This method will return an error if the keys are already\n    * cached in memory.\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function The name of the function to store the keys for\n    * @param proving_key The proving key of the function\n    * @param verifying_key The verifying key of the function\n    * @param {string} program\n    * @param {string} _function\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    cacheKeypairInWasmMemory(program, _function, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proving_key, ProvingKey);\n            var ptr2 = proving_key.__destroy_into_raw();\n            _assertClass(verifying_key, VerifyingKey);\n            var ptr3 = verifying_key.__destroy_into_raw();\n            wasm.programmanager_cacheKeypairInWasmMemory(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, ptr3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the proving & verifying keys cached in WASM memory for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    getCachedKeypair(program_id, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_getCachedKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Synthesize a proving and verifying key for a program function. This method should be used\n    * when there is a need to pre-synthesize keys (i.e. for caching purposes, etc.)\n    *\n    * @param program The source code of the program containing the desired function\n    * @param function The name of the function to synthesize the key for\n    * @param {string} program\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    synthesizeKeypair(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_synthesizeKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Clear key cache in wasm memory.\n    *\n    * This method will clear the key cache in wasm memory. It is important to note that this will\n    * not DE-allocate the memory assigned to wasm as wasm memory cannot be shrunk. The total\n    * memory allocated to wasm will remain constant but will be available for other usage after\n    * calling this method.\n    */\n    clearKeyCache() {\n        wasm.programmanager_clearKeyCache(this.__wbg_ptr);\n    }\n    /**\n    * Check if the cache contains a keypair for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} function_id\n    * @returns {boolean}\n    */\n    keyExists(program_id, function_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_keyExists(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `transfer_proving_key` and `transfer_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param transfer_proving_key (optional) Provide a proving key to use for the transfer\n    * function\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    transfer(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, cache, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr4 = fee_record.__destroy_into_raw();\n        const ptr5 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_transfer(this.__wbg_ptr, ptr0, amount_credits, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, cache, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nexport class ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nexport class RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nexport class RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nexport class VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.viewkey_from_private_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.viewkey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_log_9922ff46bfdd7ef5 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_fetch_57429b87be3dcc33 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_228(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7391 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1193, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7392 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1193, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:122,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('aleo_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n"],"names":["wasm","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","get","original","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h282db0332f5ea9ca","passArray8ToWasm0","getArrayU8FromWasm0","_assertClass","instance","klass","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","handleError","apply","this","e","__wbindgen_exn_store","initThreadPool","num_threads","wbg_rayon_start_worker","receiver","Address","__wrap","Object","create","prototype","__wbg_ptr","__destroy_into_raw","free","__wbg_address_free","from_private_key","private_key","PrivateKey","address_from_private_key","from_view_key","view_key","ViewKey","address_from_view_key","from_string","address","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","address_from_string","to_string","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","address_to_string","r0","r1","__wbindgen_free","verify","signature","Signature","address_verify","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","KeyPair","__wbg_keypair_free","constructor","proving_key","verifying_key","ProvingKey","VerifyingKey","ptr1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","__wbg_privatekey_free","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","privatekey_to_address","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","privatekeyciphertext_encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","fromString","privatekeyciphertext_fromString","Program","__wbg_program_free","program","program_fromString","program_toString","getFunctions","program_getFunctions","getFunctionInputs","function_name","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","getCreditsProgram","program_getCreditsProgram","id","program_id","isEqual","other","program_isEqual","getImports","program_getImports","ProgramManager","__wbg_programmanager_free","join","record_1","record_2","fee_credits","fee_record","url","cache","join_proving_key","join_verifying_key","fee_proving_key","fee_verifying_key","RecordPlaintext","ptr2","ptr3","ptr4","len4","ptr5","ptr6","ptr7","ptr8","programmanager_join","execute_local","_function","inputs","imports","len1","len2","programmanager_execute_local","execute","programmanager_execute","estimateExecutionFee","len3","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","r2","BigInt","asUintN","split","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_split","deploy","programmanager_deploy","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","programmanager_new","cacheKeypairInWasmMemory","programmanager_cacheKeypairInWasmMemory","getCachedKeypair","programmanager_getCachedKeypair","synthesizeKeypair","programmanager_synthesizeKeypair","clearKeyCache","programmanager_clearKeyCache","keyExists","function_id","programmanager_keyExists","transfer","amount_credits","recipient","transfer_type","transfer_proving_key","transfer_verifying_key","len5","ptr9","programmanager_transfer","__wbg_provingkey_free","fromBytes","bytes","provingkey_fromBytes","toBytes","provingkey_toBytes","v1","RecordCiphertext","__wbg_recordciphertext_free","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","__wbg_signature_free","signature_sign","signature_verify","signature_from_string","signature_to_string","Transaction","__wbg_transaction_free","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","__wbg_viewkey_free","viewkey_from_private_key","viewkey_from_string","viewkey_to_string","viewkey_to_address","deferred3_0","deferred3_1","viewkey_decrypt","wbg_rayon_PoolBuilder","__wbg_wbg_rayon_poolbuilder_free","numThreads","wbg_rayon_poolbuilder_numThreads","wbg_rayon_poolbuilder_receiver","build","wbg_rayon_poolbuilder_build","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbindgen_cb_drop","__wbindgen_string_new","__wbg_log_9922ff46bfdd7ef5","console","log","__wbindgen_string_get","__wbindgen_object_clone_ref","__wbg_transaction_new","__wbindgen_bigint_from_u64","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_fetch_57429b87be3dcc33","fetch","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbindgen_is_undefined","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","async","__wbg_value_555e4f564193db05","value","__wbindgen_number_new","__wbg_fetch_8eaf01857a5bb21f","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_new_55c9955722952374","AbortController","arguments","__wbg_abort_654b796176d117aa","abort","__wbg_new_1eead62f64ca15ce","Headers","__wbg_append_fda9e3432e3e88da","arg3","arg4","append","__wbg_status_114ef6fe27fb8b00","status","__wbg_response_f2acf2ecbe021710","response","__wbg_responseText_da275667251fd153","responseText","__wbg_new_daafff584c71593b","XMLHttpRequest","__wbg_open_56fa1eb95989f6a5","arg5","open","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_send_9f5007eae908c72e","send","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","Response","__wbg_url_8503de97f69da463","__wbg_status_ac85a3142a84caa2","__wbg_headers_b70de86b8e989bc0","headers","__wbg_arrayBuffer_288fb3538806e85c","arrayBuffer","__wbg_data_ab99ae4a2e1e8bc9","data","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_new_8e7322f46d5d019c","Worker","__wbg_postMessage_8c609e2bde333d9c","postMessage","__wbg_crypto_c48a774b022d20ac","crypto","__wbindgen_is_object","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_require_8f08ceecec0f4fee","module","require","__wbindgen_is_function","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_get_44be0491f933a435","__wbg_length_fff51ee6522a1a18","__wbg_new_898a68150f225f2e","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","Reflect","__wbg_call_cb65541d95d71282","__wbg_new_b51585de1b234aff","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_of_3f69007bb4eeae65","of","__wbg_push_ca1c26067ef907ac","__wbg_call_01734de55d61e11d","__wbg_new_43f1b47c28813cbd","state0","Promise","cb0","wasm_bindgen__convert__closures__invoke2_mut__h3a94758921d57ad1","__wbg_adapter_228","__wbg_resolve_53698b95aaf7fcf8","resolve","__wbg_then_f7e06ee3c11698eb","then","__wbg_then_b2267541e2a73865","__wbg_buffer_085ec1f694018c4f","__wbg_new_a0af68041688e8fd","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_new_8125e318e6245eed","__wbg_set_5cf90238115182c3","__wbg_length_72e2208bbc0efc61","__wbg_newwithlength_e5d69174d6984cd7","__wbg_subarray_13db269f57aa838d","__wbg_stringify_e25465938f3f611f","__wbg_has_c5fcd020291e56b8","has","__wbg_set_092e06b0f9d71865","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_startWorkers_6fd3af285ea11136","startWorkers","__wbindgen_closure_wrapper7391","__wbindgen_closure_wrapper7392","__wbg_init_memory","maybe_memory","WebAssembly","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","Instance","input","URL","instantiateStreaming","warn","instantiate","__wbg_load"],"sourceRoot":""}