{"version":3,"file":"991.bundle.js","mappings":"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","sources":["webpack://aleo-website/../wasm/pkg-parallel/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js","webpack://aleo-website/./src/workers/keys.js","webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\n        type: 'module'\n      });\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n","const FEE_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/fee.prover.36542ce\";\nconst FEE_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/fee.verifier.2de311b\";\nconst JOIN_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/join.prover.da05baf\";\nconst JOIN_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/join.verifier.1489109\";\nconst SPLIT_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/split.prover.8c585f2\";\nconst SPLIT_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/split.verifier.8281688\";\nconst TRANSFER_PRIVATE_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\";\nconst TRANSFER_PRIVATE_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_private_to_public.prover.cf3b952\";\nconst TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_private_to_public.verifier.5bd459b\";\nconst TRANSFER_PUBLIC_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_public.prover.1117f0a\";\nconst TRANSFER_PUBLIC_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_public.verifier.d63af11\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_public_to_private.prover.7b763af\";\nconst TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL =\n    \"https://testnet3.parameters.aleo.org/transfer_public_to_private.verifier.25f6542\";\n\nexport {\n    FEE_PROVER_URL,\n    FEE_VERIFIER_URL,\n    JOIN_PROVER_URL,\n    JOIN_VERIFIER_URL,\n    SPLIT_PROVER_URL,\n    SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL,\n    TRANSFER_PRIVATE_VERIFIER_URL,\n    TRANSFER_PUBLIC_PROVER_URL,\n    TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL,\n};\n","import init, * as aleo from \"@aleohq/wasm\";\nimport {\n    FEE_PROVER_URL,\n    FEE_VERIFIER_URL,\n    JOIN_PROVER_URL,\n    JOIN_VERIFIER_URL,\n    SPLIT_PROVER_URL,\n    SPLIT_VERIFIER_URL,\n    TRANSFER_PRIVATE_PROVER_URL,\n    TRANSFER_PRIVATE_VERIFIER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL,\n    TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL,\n    TRANSFER_PUBLIC_PROVER_URL,\n    TRANSFER_PUBLIC_VERIFIER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL,\n    TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL,\n} from \"./keys.js\";\n\nlet feeProvingKey = null;\nlet feeVerifyingKey = null;\nlet joinProvingKey = null;\nlet joinVerifyingKey = null;\nlet splitProvingKey = null;\nlet splitVerifyingKey = null;\nlet transferPrivateProvingKey = null;\nlet transferPrivateVerifyingKey = null;\nlet transferPrivateToPublicProvingKey = null;\nlet transferPrivateToPublicVerifyingKey = null;\nlet transferPublicProvingKey = null;\nlet transferPublicVerifyingKey = null;\nlet transferPublicToPrivateProvingKey = null;\nlet transferPublicToPrivateVerifyingKey = null;\n\nawait init();\nawait aleo.initThreadPool(10);\nconst aleoProgramManager = new aleo.ProgramManager();\n\nconst getFunctionKeys = async (proverUrl, verifierUrl) => {\n    console.log(\n        \"Downloading proving and verifying keys from: \",\n        proverUrl,\n        verifierUrl,\n    );\n    let proofResponse = await fetch(proverUrl);\n    console.log(\"Getting array buffer\");\n    let proofBuffer = await proofResponse.arrayBuffer();\n    let verificationResponse = await fetch(verifierUrl);\n    let verificationBuffer = await verificationResponse.arrayBuffer();\n    console.log(\"Proving and verifying key binaries downloaded\");\n    console.log(\"Creating proving and verifying keys...\");\n    let provingKey = aleo.ProvingKey.fromBytes(new Uint8Array(proofBuffer));\n    let verifyingKey = aleo.VerifyingKey.fromBytes(\n        new Uint8Array(verificationBuffer),\n    );\n    console.log(\"Proving and verifying keys created\");\n    return [provingKey, verifyingKey];\n};\n\nconst validateProgram = (programString) => {\n    try {\n        return aleo.Program.fromString(programString);\n    } catch (error) {\n        console.log(error);\n        throw `Program input is not a valid Aleo program`;\n    }\n};\n\nconst programMatchesOnChain = async (programString, url) => {\n    const program = validateProgram(programString);\n    let onlineProgramText;\n    try {\n        const program_id = program.id();\n        const program_url = `${url}/testnet3/program/${program_id}`;\n        const programResponse = await fetch(program_url);\n        onlineProgramText = await programResponse.json();\n    } catch (error) {\n        console.log(error);\n        throw `Program does not exist on chain`;\n    }\n\n    try {\n        const onlineProgram = aleo.Program.fromString(onlineProgramText);\n        return program.isEqual(onlineProgram);\n    } catch (error) {\n        console.log(error);\n        throw `Could not parse program from chain`;\n    }\n};\nlet lastLocalProgram = null;\n\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        try {\n            validateProgram(localProgram);\n\n            if (lastLocalProgram === null) {\n                lastLocalProgram = localProgram;\n            } else if (lastLocalProgram !== localProgram) {\n                aleoProgramManager.clearKeyCache();\n                lastLocalProgram = localProgram;\n            }\n\n            let response = aleoProgramManager.execute_local(\n                aleo.PrivateKey.from_string(privateKey),\n                localProgram,\n                aleoFunction,\n                inputs,\n                true,\n            );\n\n            console.log(\n                `Web worker: Local execution completed in ${\n                    performance.now() - startTime\n                } ms`,\n            );\n            let outputs = response.getOutputs();\n            console.log(`Function execution response: ${outputs}`);\n            self.postMessage({ type: \"OFFLINE_EXECUTION_COMPLETED\", outputs });\n        } catch (error) {\n            console.log(error);\n            self.postMessage({ type: \"ERROR\", errorMessage: error.toString() });\n        }\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const programMatches = await programMatchesOnChain(\n                    remoteProgram,\n                    url,\n                );\n                if (!programMatches) {\n                    throw `Program does not match the program deployed on the Aleo Network, cannot execute`;\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(\n                        FEE_PROVER_URL,\n                        FEE_VERIFIER_URL,\n                    );\n                }\n\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(\n                        aleo.Program.getCreditsProgram().toString(),\n                        \"fee\",\n                        feeProvingKey,\n                        feeVerifyingKey,\n                    );\n                }\n\n                let executeTransaction = await aleoProgramManager.execute(\n                    aleo.PrivateKey.from_string(privateKey),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: On-chain execution transaction created in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                let transaction = executeTransaction.toString();\n                let transaction_and_url = [transaction, url];\n                console.log(transaction);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction_and_url,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { privateKey, remoteProgram, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const programMatches = await programMatchesOnChain(\n                    remoteProgram,\n                    url,\n                );\n                if (!programMatches) {\n                    throw `Program does not match the program deployed on the Aleo Network, cannot estimate execution fee`;\n                }\n\n                let executeFee = await aleoProgramManager.estimateExecutionFee(\n                    aleo.PrivateKey.from_string(privateKey),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: Execution fee estimated in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                console.log(\"Execution Fee:\", executeFee);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                try {\n                    await programMatchesOnChain(program, url);\n                    throw `A program with the same name already exists on the Aleo Network, cannot estimate deployment fee`;\n                } catch (e) {\n                    if (e !== `Program does not exist on chain`) {\n                        throw e;\n                    }\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment fee estimation...`,\n                    );\n                }\n\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleoProgramManager.estimateDeploymentFee(\n                        program,\n                        false,\n                    );\n\n                console.log(\n                    `Web worker: Deployment fee estimation completed in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                console.log(\"Deployment fee:\", deploymentFee);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating transfer...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                console.log(\"transfer type:\", transfer_type);\n                if (transfer_type === \"public\") {\n                    if (\n                        transferPublicProvingKey === null ||\n                        transferPublicVerifyingKey === null\n                    ) {\n                        [transferPublicProvingKey, transferPublicVerifyingKey] =\n                            await getFunctionKeys(\n                                TRANSFER_PUBLIC_PROVER_URL,\n                                TRANSFER_PUBLIC_VERIFIER_URL,\n                            );\n                        if (\n                            !aleoProgramManager.keyExists(\n                                \"credits.aleo\",\n                                \"transfer_public\",\n                            )\n                        ) {\n                            aleoProgramManager.cacheKeypairInWasmMemory(\n                                aleo.Program.getCreditsProgram().toString(),\n                                \"transfer_public\",\n                                transferPublicProvingKey,\n                                transferPublicVerifyingKey,\n                            );\n                        }\n                    }\n                } else if (transfer_type === \"publicToPrivate\") {\n                    if (\n                        transferPublicToPrivateProvingKey === null ||\n                        transferPublicToPrivateVerifyingKey === null\n                    ) {\n                        [\n                            transferPublicToPrivateProvingKey,\n                            transferPublicToPrivateVerifyingKey,\n                        ] = await getFunctionKeys(\n                            TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL,\n                            TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL,\n                        );\n                        if (\n                            !aleoProgramManager.keyExists(\n                                \"credits.aleo\",\n                                \"transfer_public_to_private\",\n                            )\n                        ) {\n                            aleoProgramManager.cacheKeypairInWasmMemory(\n                                aleo.Program.getCreditsProgram().toString(),\n                                \"transfer_public_to_private\",\n                                transferPublicToPrivateProvingKey,\n                                transferPublicToPrivateVerifyingKey,\n                            );\n                        }\n                    }\n                } else if (transfer_type === \"privateToPublic\") {\n                    if (\n                        transferPrivateToPublicProvingKey === null ||\n                        transferPrivateToPublicVerifyingKey === null\n                    ) {\n                        [\n                            transferPrivateToPublicProvingKey,\n                            transferPrivateToPublicVerifyingKey,\n                        ] = await getFunctionKeys(\n                            TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL,\n                            TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL,\n                        );\n                        if (\n                            !aleoProgramManager.keyExists(\n                                \"credits.aleo\",\n                                \"transfer_private_to_public\",\n                            )\n                        ) {\n                            aleoProgramManager.cacheKeypairInWasmMemory(\n                                aleo.Program.getCreditsProgram().toString(),\n                                \"transfer_private_to_public\",\n                                transferPrivateToPublicProvingKey,\n                                transferPrivateToPublicVerifyingKey,\n                            );\n                        }\n                    }\n                } else if (transfer_type === \"private\") {\n                    if (\n                        transferPrivateProvingKey === null ||\n                        transferPrivateVerifyingKey === null\n                    ) {\n                        [\n                            transferPrivateProvingKey,\n                            transferPrivateVerifyingKey,\n                        ] = await getFunctionKeys(\n                            TRANSFER_PRIVATE_PROVER_URL,\n                            TRANSFER_PRIVATE_VERIFIER_URL,\n                        );\n                        if (\n                            !aleoProgramManager.keyExists(\n                                \"credits.aleo\",\n                                \"transfer_private\",\n                            )\n                        ) {\n                            aleoProgramManager.cacheKeypairInWasmMemory(\n                                aleo.Program.getCreditsProgram().toString(),\n                                \"transfer_private\",\n                                transferPrivateProvingKey,\n                                transferPrivateVerifyingKey,\n                            );\n                        }\n                    }\n                } else {\n                    throw `Invalid transfer type`;\n                }\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(\n                        FEE_PROVER_URL,\n                        FEE_VERIFIER_URL,\n                    );\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(\n                        aleo.Program.getCreditsProgram().toString(),\n                        \"fee\",\n                        feeProvingKey,\n                        feeVerifyingKey,\n                    );\n                }\n\n                let transferTransaction = await aleoProgramManager.transfer(\n                    aleo.PrivateKey.from_string(privateKey),\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    aleo.RecordPlaintext.fromString(amountRecord),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: Transfer transaction created in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                let transaction = transferTransaction.toString();\n                let transaction_and_url = [transaction, url];\n                console.log(transaction);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction_and_url,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                try {\n                    await programMatchesOnChain(program, url);\n                    throw `A program with the same name already exists on the Aleo Network, cannot deploy`;\n                } catch (e) {\n                    if (e !== `Program does not exist on chain`) {\n                        throw e;\n                    }\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (feeProvingKey === null || feeVerifyingKey === null) {\n                    [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(\n                        FEE_PROVER_URL,\n                        FEE_VERIFIER_URL,\n                    );\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                    console.log(\"Caching fee keys\");\n                    aleoProgramManager.cacheKeypairInWasmMemory(\n                        aleo.Program.getCreditsProgram().toString(),\n                        \"fee\",\n                        feeProvingKey,\n                        feeVerifyingKey,\n                    );\n                }\n\n                console.log(\"Deploying program..\");\n                let deployTransaction = await aleoProgramManager.deploy(\n                    aleo.PrivateKey.from_string(privateKey),\n                    program,\n                    undefined,\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: Deployment transaction created in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                let transaction = deployTransaction.toString();\n                let transaction_and_url = [transaction, url];\n                console.log(transaction);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction_and_url,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                if (splitProvingKey === null || splitVerifyingKey === null) {\n                    [splitProvingKey, splitVerifyingKey] =\n                        await getFunctionKeys(\n                            SPLIT_PROVER_URL,\n                            SPLIT_VERIFIER_URL,\n                        );\n                }\n                if (!aleoProgramManager.keyExists(\"credits.aleo\", \"split\")) {\n                    aleoProgramManager.cacheKeypairInWasmMemory(\n                        aleo.Program.getCreditsProgram().toString(),\n                        \"split\",\n                        splitProvingKey,\n                        splitVerifyingKey,\n                    );\n                }\n                let splitTransaction = await aleoProgramManager.split(\n                    aleo.PrivateKey.from_string(privateKey),\n                    splitAmount,\n                    aleo.RecordPlaintext.fromString(record),\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: Split transaction created in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                let transaction = splitTransaction.toString();\n                let transaction_and_url = [transaction, url];\n                console.log(transaction);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction_and_url,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n            if (joinProvingKey === null || joinVerifyingKey === null) {\n                [joinProvingKey, joinVerifyingKey] = await getFunctionKeys(\n                    JOIN_PROVER_URL,\n                    JOIN_VERIFIER_URL,\n                );\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"join\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(\n                    aleo.Program.getCreditsProgram().toString(),\n                    \"join\",\n                    joinProvingKey,\n                    joinVerifyingKey,\n                );\n            }\n            if (feeProvingKey === null || feeVerifyingKey === null) {\n                [feeProvingKey, feeVerifyingKey] = await getFunctionKeys(\n                    FEE_PROVER_URL,\n                    FEE_VERIFIER_URL,\n                );\n            }\n            if (!aleoProgramManager.keyExists(\"credits.aleo\", \"fee\")) {\n                aleoProgramManager.cacheKeypairInWasmMemory(\n                    aleo.Program.getCreditsProgram().toString(),\n                    \"fee\",\n                    feeProvingKey,\n                    feeVerifyingKey,\n                );\n            }\n\n            try {\n                let joinTransaction = await aleoProgramManager.join(\n                    aleo.PrivateKey.from_string(privateKey),\n                    aleo.RecordPlaintext.fromString(recordOne),\n                    aleo.RecordPlaintext.fromString(recordTwo),\n                    fee,\n                    aleo.RecordPlaintext.fromString(feeRecord),\n                    url,\n                    true,\n                );\n\n                console.log(\n                    `Web worker: Join transaction created in ${\n                        performance.now() - startTime\n                    } ms`,\n                );\n                let transaction = joinTransaction.toString();\n                let transaction_and_url = [transaction, url];\n                console.log(transaction);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction_and_url,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    }\n});\n"],"names":["waitForMsgType","target","type","Promise","resolve","addEventListener","onMsg","data","removeEventListener","_workers","async","startWorkers","module","memory","builder","workerInit","receiver","all","Array","from","length","numThreads","worker","Worker","URL","postMessage","build","self","then","pkg","default","wbg_rayon_start_worker","FEE_PROVER_URL","FEE_VERIFIER_URL","JOIN_PROVER_URL","JOIN_VERIFIER_URL","SPLIT_PROVER_URL","SPLIT_VERIFIER_URL","TRANSFER_PRIVATE_PROVER_URL","TRANSFER_PRIVATE_VERIFIER_URL","TRANSFER_PRIVATE_TO_PUBLIC_PROVER_URL","TRANSFER_PRIVATE_TO_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_PROVER_URL","TRANSFER_PUBLIC_VERIFIER_URL","TRANSFER_PUBLIC_TO_PRIVATE_PROVER_URL","TRANSFER_PUBLIC_TO_PRIVATE_VERIFIER_URL","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","reject","record","result","_typeof","__await","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","feeProvingKey","feeVerifyingKey","joinProvingKey","joinVerifyingKey","splitProvingKey","splitVerifyingKey","transferPrivateProvingKey","transferPrivateVerifyingKey","transferPrivateToPublicProvingKey","transferPrivateToPublicVerifyingKey","transferPublicProvingKey","transferPublicVerifyingKey","transferPublicToPrivateProvingKey","transferPublicToPrivateVerifyingKey","init","aleo","aleoProgramManager","getFunctionKeys","_ref","_callee","proverUrl","verifierUrl","proofResponse","proofBuffer","verificationResponse","verificationBuffer","provingKey","verifyingKey","_context","console","log","fetch","arrayBuffer","fromBytes","Uint8Array","_x","_x2","validateProgram","programString","fromString","programMatchesOnChain","_ref2","_callee2","url","program","onlineProgramText","program_id","program_url","programResponse","onlineProgram","_context2","id","concat","json","t0","isEqual","t1","_x3","_x4","lastLocalProgram","ev","_ev$data","localProgram","aleoFunction","inputs","privateKey","startTime","performance","now","clearKeyCache","response","execute_local","from_string","outputs","getOutputs","errorMessage","toString","_ev$data2","remoteProgram","fee","feeRecord","_callee3","_yield$getFunctionKey","_yield$getFunctionKey2","executeTransaction","transaction","transaction_and_url","_context3","_slicedToArray","keyExists","cacheKeypairInWasmMemory","getCreditsProgram","execute","_ev$data3","_callee4","executeFee","_context4","estimateExecutionFee","executionFee","Number","_ev$data4","_callee5","deploymentFee","_context5","estimateDeploymentFee","_ev$data5","amountCredits","recipient","transfer_type","amountRecord","_callee6","_yield$getFunctionKey3","_yield$getFunctionKey4","_yield$getFunctionKey5","_yield$getFunctionKey6","_yield$getFunctionKey7","_yield$getFunctionKey8","_yield$getFunctionKey9","_yield$getFunctionKey10","_yield$getFunctionKey11","_yield$getFunctionKey12","transferTransaction","_context6","transfer","_ev$data6","_callee7","_yield$getFunctionKey13","_yield$getFunctionKey14","deployTransaction","_context7","deploy","_ev$data7","splitAmount","_callee8","_yield$getFunctionKey15","_yield$getFunctionKey16","splitTransaction","_context8","split","_ev$data8","recordOne","recordTwo","_callee9","_yield$getFunctionKey17","_yield$getFunctionKey18","_yield$getFunctionKey19","_yield$getFunctionKey20","joinTransaction","_context9","join"],"sourceRoot":""}