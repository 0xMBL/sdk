{"version":3,"file":"529.bundle.js","mappings":"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","sources":["webpack://aleo-website/./node_modules/@aleohq/wasm/aleo_wasm.js"],"sourcesContent":["import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h3355b4a3616a7762(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_216(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h6304dd41c7c256fc(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n*/\nexport class Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nexport class ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Create a private key from a string representation\n    *\n    * This function will fail if the text is not a valid private key\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key\n    *\n    * This function should be used very carefully as it exposes the private key plaintext\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.privatekey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a private key ciphertext using a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt the private key with a secret.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext using a secret.\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nexport class PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string.\n    *\n    * The secret is sensitive and will be needed to decrypt the private key later, so it should be stored securely.\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_encryptPrivateKey(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string.\n    *\n    * This must be the same secret used to encrypt the private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nexport class Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get javascript array of functions names in the program\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a webform to capture user inputs for an execution of a function.\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class ProgramManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProgramManager.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `split_proving_key` and `split_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    split(private_key, split_amount, amount_record, url, cache, split_proving_key, split_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr1 = amount_record.__destroy_into_raw();\n        const ptr2 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr3 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr4 = split_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_split(this.__wbg_ptr, ptr0, split_amount, ptr1, ptr2, len2, cache, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @returns {ExecutionResponse}\n    */\n    execute_local(private_key, program, _function, inputs, cache, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            var ptr0 = private_key.__destroy_into_raw();\n            const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            let ptr3 = 0;\n            if (!isLikeNone(proving_key)) {\n                _assertClass(proving_key, ProvingKey);\n                ptr3 = proving_key.__destroy_into_raw();\n            }\n            let ptr4 = 0;\n            if (!isLikeNone(verifying_key)) {\n                _assertClass(verifying_key, VerifyingKey);\n                ptr4 = verifying_key.__destroy_into_raw();\n            }\n            wasm.programmanager_execute_local(retptr, this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), cache, ptr3, ptr4);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExecutionResponse.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager's memory.\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    execute(private_key, program, _function, inputs, fee_credits, fee_record, url, cache, proving_key, verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr5 = proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr6 = verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_execute(this.__wbg_ptr, ptr0, ptr1, len1, ptr2, len2, addHeapObject(inputs), fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form {\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} _url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    deploy(private_key, program, imports, fee_credits, fee_record, _url, cache, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr2 = fee_record.__destroy_into_raw();\n        const ptr3 = passStringToWasm0(_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr4 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr5 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_deploy(this.__wbg_ptr, ptr0, ptr1, len1, isLikeNone(imports) ? 0 : addHeapObject(imports), fee_credits, ptr2, ptr3, len3, cache, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `join_proving_key` and `join_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    join(private_key, record_1, record_2, fee_credits, fee_record, url, cache, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        _assertClass(record_1, RecordPlaintext);\n        var ptr1 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr2 = record_2.__destroy_into_raw();\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr3 = fee_record.__destroy_into_raw();\n        const ptr4 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr5 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr6 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_join(this.__wbg_ptr, ptr0, ptr1, ptr2, fee_credits, ptr3, ptr4, len4, cache, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.programmanager_new();\n        return ProgramManager.__wrap(ret);\n    }\n    /**\n    * Cache the proving and verifying keys for a program function in WASM memory. This method\n    * will take a verifying and proving key and store them in the program manager's internal\n    * in-memory cache. This memory is allocated in WebAssembly, so it is important to be mindful\n    * of the amount of memory being used. This method will return an error if the keys are already\n    * cached in memory.\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function The name of the function to store the keys for\n    * @param proving_key The proving key of the function\n    * @param verifying_key The verifying key of the function\n    * @param {string} program\n    * @param {string} _function\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    cacheKeypairInWasmMemory(program, _function, proving_key, verifying_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            _assertClass(proving_key, ProvingKey);\n            var ptr2 = proving_key.__destroy_into_raw();\n            _assertClass(verifying_key, VerifyingKey);\n            var ptr3 = verifying_key.__destroy_into_raw();\n            wasm.programmanager_cacheKeypairInWasmMemory(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, ptr3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the proving & verifying keys cached in WASM memory for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    getCachedKeypair(program_id, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_getCachedKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Synthesize a proving and verifying key for a program function. This method should be used\n    * when there is a need to pre-synthesize keys (i.e. for caching purposes, etc.)\n    *\n    * @param program The source code of the program containing the desired function\n    * @param function The name of the function to synthesize the key for\n    * @param {string} program\n    * @param {string} _function\n    * @returns {KeyPair}\n    */\n    synthesizeKeypair(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_synthesizeKeypair(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Clear key cache in wasm memory.\n    *\n    * This method will clear the key cache in wasm memory. It is important to note that this will\n    * not DE-allocate the memory assigned to wasm as wasm memory cannot be shrunk. The total\n    * memory allocated to wasm will remain constant but will be available for other usage after\n    * calling this method.\n    */\n    clearKeyCache() {\n        wasm.programmanager_clearKeyCache(this.__wbg_ptr);\n    }\n    /**\n    * Check if the cache contains a keypair for a specific function\n    *\n    * @param program_id The name of the program containing the desired function\n    * @param function_id The name of the function to retrieve the keys for\n    * @param {string} program_id\n    * @param {string} function_id\n    * @returns {boolean}\n    */\n    keyExists(program_id, function_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_keyExists(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param cache Cache the proving and verifying keys in the ProgramManager memory. If this is\n    * set to `true` the keys synthesized (or passed in as optional parameters via the\n    * `transfer_proving_key` and `transfer_verifying_key` arguments) will be stored in the\n    * ProgramManager's memory and used for subsequent transactions. If this is set to `false` the\n    * proving and verifying keys will be deallocated from memory after the transaction is executed\n    * @param transfer_proving_key (optional) Provide a proving key to use for the transfer\n    * function\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext} fee_record\n    * @param {string} url\n    * @param {boolean} cache\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @returns {Promise<Transaction>}\n    */\n    transfer(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, cache, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key) {\n        _assertClass(private_key, PrivateKey);\n        var ptr0 = private_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr3 = amount_record.__destroy_into_raw();\n        }\n        _assertClass(fee_record, RecordPlaintext);\n        var ptr4 = fee_record.__destroy_into_raw();\n        const ptr5 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len5 = WASM_VECTOR_LEN;\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr6 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr7 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr8 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr9 = fee_verifying_key.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_transfer(this.__wbg_ptr, ptr0, amount_credits, ptr1, len1, ptr2, len2, ptr3, fee_credits, ptr4, ptr5, len5, cache, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nexport class RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Return a record ciphertext from a string.\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the record ciphertext string.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key.\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns `true` if the view key can decrypt the record ciphertext.\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Aleo record plaintext\n*/\nexport class RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * Return a record plaintext from a string.\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nexport class Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.viewkey_from_private_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.viewkey_to_address(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.__wbg_ptr);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_log_bcdbad8373c39b16 = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_fetch_57429b87be3dcc33 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_216(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7011 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1185, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper7012 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1185, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:122,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('aleo_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n"],"names":["wasm","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","Error","cachedUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","slice","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","set","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","get","original","__wbg_adapter_32","arg2","wasm_bindgen__convert__closures__invoke1_mut__h3355b4a3616a7762","_assertClass","instance","klass","passArray8ToWasm0","getArrayU8FromWasm0","handleError","apply","this","e","__wbindgen_exn_store","initThreadPool","num_threads","wbg_rayon_start_worker","receiver","Address","static","Object","create","prototype","__wbg_ptr","__destroy_into_raw","free","__wbg_address_free","private_key","PrivateKey","address_from_private_key","__wrap","view_key","ViewKey","address_from_view_key","address","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","address_from_string","to_string","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","address_to_string","r0","r1","__wbindgen_free","verify","signature","Signature","address_verify","ExecutionResponse","__wbg_executionresponse_free","getOutputs","executionresponse_getOutputs","KeyPair","__wbg_keypair_free","constructor","proving_key","verifying_key","ProvingKey","VerifyingKey","ptr1","keypair_new","provingKey","keypair_provingKey","verifyingKey","keypair_verifyingKey","__wbg_privatekey_free","privatekey_new","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","to_view_key","privatekey_to_view_key","to_address","privatekey_to_address","sign","privatekey_sign","secret","privatekey_newEncrypted","PrivateKeyCiphertext","toCiphertext","privatekey_toCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","__wbg_privatekeyciphertext_free","privatekeyciphertext_encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","Program","__wbg_program_free","program","program_fromString","program_toString","getFunctions","program_getFunctions","getFunctionInputs","function_name","program_getFunctionInputs","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","id","program_id","isEqual","other","program_isEqual","ProgramManager","__wbg_programmanager_free","split","split_amount","amount_record","url","cache","split_proving_key","split_verifying_key","RecordPlaintext","ptr2","len2","ptr3","ptr4","programmanager_split","execute_local","_function","inputs","len1","programmanager_execute_local","execute","fee_credits","fee_record","fee_proving_key","fee_verifying_key","len4","ptr5","ptr6","ptr7","ptr8","programmanager_execute","deploy","imports","_url","len3","programmanager_deploy","join","record_1","record_2","join_proving_key","join_verifying_key","programmanager_join","programmanager_new","cacheKeypairInWasmMemory","programmanager_cacheKeypairInWasmMemory","getCachedKeypair","programmanager_getCachedKeypair","synthesizeKeypair","programmanager_synthesizeKeypair","clearKeyCache","programmanager_clearKeyCache","keyExists","function_id","programmanager_keyExists","transfer","amount_credits","recipient","transfer_type","transfer_proving_key","transfer_verifying_key","len5","ptr9","programmanager_transfer","__wbg_provingkey_free","bytes","provingkey_fromBytes","toBytes","provingkey_toBytes","r2","v1","RecordCiphertext","__wbg_recordciphertext_free","record","recordciphertext_fromString","recordciphertext_toString","decrypt","recordciphertext_decrypt","isOwner","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_fromString","recordplaintext_toString","microcredits","recordplaintext_microcredits","BigInt","asUintN","serialNumberString","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","__wbg_signature_free","signature_sign","signature_verify","signature_from_string","signature_to_string","Transaction","__wbg_transaction_free","transaction","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","__wbg_viewkey_free","viewkey_from_private_key","viewkey_from_string","viewkey_to_string","viewkey_to_address","deferred3_0","deferred3_1","viewkey_decrypt","wbg_rayon_PoolBuilder","__wbg_wbg_rayon_poolbuilder_free","numThreads","wbg_rayon_poolbuilder_numThreads","wbg_rayon_poolbuilder_receiver","build","wbg_rayon_poolbuilder_build","__wbg_get_imports","wbg","__wbg_transaction_new","__wbindgen_string_new","__wbindgen_object_drop_ref","__wbindgen_cb_drop","__wbg_log_bcdbad8373c39b16","console","log","__wbindgen_object_clone_ref","__wbindgen_string_get","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","error","__wbg_fetch_57429b87be3dcc33","fetch","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbindgen_number_new","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbindgen_is_undefined","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","async","__wbg_value_555e4f564193db05","value","__wbg_fetch_8eaf01857a5bb21f","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_new_55c9955722952374","AbortController","arguments","__wbg_abort_654b796176d117aa","abort","__wbg_data_ab99ae4a2e1e8bc9","data","__wbg_status_114ef6fe27fb8b00","status","__wbg_response_f2acf2ecbe021710","response","__wbg_responseText_da275667251fd153","responseText","__wbg_new_daafff584c71593b","XMLHttpRequest","__wbg_open_56fa1eb95989f6a5","arg3","arg4","arg5","open","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_send_9f5007eae908c72e","send","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_new_8e7322f46d5d019c","Worker","__wbg_postMessage_8c609e2bde333d9c","postMessage","__wbg_new_1eead62f64ca15ce","Headers","__wbg_append_fda9e3432e3e88da","append","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","Response","__wbg_url_8503de97f69da463","__wbg_status_ac85a3142a84caa2","__wbg_headers_b70de86b8e989bc0","headers","__wbg_arrayBuffer_288fb3538806e85c","arrayBuffer","__wbg_crypto_c48a774b022d20ac","crypto","__wbindgen_is_object","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_require_8f08ceecec0f4fee","module","require","__wbindgen_is_function","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_get_44be0491f933a435","__wbg_length_fff51ee6522a1a18","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","Reflect","__wbg_call_cb65541d95d71282","__wbg_new_b51585de1b234aff","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_of_3f69007bb4eeae65","of","__wbg_call_01734de55d61e11d","__wbg_new_43f1b47c28813cbd","state0","Promise","cb0","wasm_bindgen__convert__closures__invoke2_mut__h6304dd41c7c256fc","__wbg_adapter_216","__wbg_resolve_53698b95aaf7fcf8","resolve","__wbg_then_f7e06ee3c11698eb","then","__wbg_then_b2267541e2a73865","__wbg_buffer_085ec1f694018c4f","__wbg_new_a0af68041688e8fd","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_new_8125e318e6245eed","__wbg_set_5cf90238115182c3","__wbg_length_72e2208bbc0efc61","__wbg_newwithlength_e5d69174d6984cd7","__wbg_subarray_13db269f57aa838d","__wbg_stringify_e25465938f3f611f","__wbg_has_c5fcd020291e56b8","has","__wbg_set_092e06b0f9d71865","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_startWorkers_6fd3af285ea11136","startWorkers","__wbindgen_closure_wrapper7011","__wbindgen_closure_wrapper7012","__wbg_init_memory","maybe_memory","WebAssembly","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","Instance","input","URL","instantiateStreaming","warn","instantiate","__wbg_load"],"sourceRoot":""}