{"version":3,"file":"383.bundle.js","mappings":"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","sources":["webpack://aleo-website/../src/utils.ts","webpack://aleo-website/../src/network-client.ts","webpack://aleo-website/../src/function-key-provider.ts","webpack://aleo-website/../src/program-manager.ts","webpack://aleo-website/../src/index.ts","webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  WasmTransaction,\n  Transaction,\n  Transition,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {Transaction | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {Transaction | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<Transaction | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <Transaction>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<Transaction | Error> {\n    try {\n      return await this.fetchData<Transaction>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<Transaction> | Error> {\n    try {\n      return await this.fetchData<Array<Transaction>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition id by its unique identifier\n   * @param {string} transition_id - The transition id to get\n   *\n   * @example\n   * const transition = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(transition_id: string): Promise<Transition | Error> {\n    try {\n      return await this.fetchData<Transition>(\"/find/transitionID/\" + transition_id);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {WasmTransaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: WasmTransaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof WasmTransaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUrl\" in params && typeof params[\"proverUrl\"] == \"string\") {\n                proverUrl = params[\"proverUrl\"];\n            }\n\n            if (\"verifierUrl\" in params && typeof params[\"verifierUrl\"] == \"string\") {\n                verifierUrl = params[\"verifierUrl\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host: string | undefined, keyProvider: FunctionKeyProvider | undefined, recordProvider: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://api.explorer.aleo.org/v1\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Execute an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async executeOffline(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(amount: number, recipient: string, transferType: string, fee: number, privateFee: boolean,\n                   recordSearchParams?: RecordSearchParams, amountRecord?: RecordPlaintext | string, feeRecord?: RecordPlaintext | string, privateKey?: PrivateKey): Promise<string | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8rjvqqqqqqqqq00ycqqqqqqqqqusvszqqqqqqqpnf6qyqqqqqqqqcd6qqqqqqqqqqvqqqqqqqqqqq0plfjy36deglp5xr0lk3rccawpqgztrnjusxnlkc8hz6879me8ty8y7rxzc3qqafadrmvz0v2aluqjwezzwkmj3q9vmr0xgk3arehjhppu7scsw6h4nj08z7fswhyq739ypuh67ff0f0sg8787aq4w80gqrn8e5kduw8h002rkjrw907zqxawqu7qmumx5zayg7k55rdzn05eg5sl8swr7fveuhud3gmf9xjsqzd9x9az5ls4s8cwjgc5lmvkhphy67q0g7qwzee7hyavg335j25mllnywrtjcwfejt55qxag7wvggqtmtc3al0gy6q83hql4wagk37e200592az7n525s80c4xwr92jr8dt40t3fyjxzszrc9umk95psswq82kkg25sh25s3mw5z3xt9qy2ftm8ec4a8l8rwfuxfujjrxxnhmrqs4wsunec3ukd4mur4fkj8enqqqv9n37e5fyag7e33rxsyp63u5rfs8hn26slsmdaqzvp2flcz506r0hqncdtt07nhulltlh5wyq4gpxsln5td2v0treu7t8wanhq6yv8hswxla7cf3w8nv4p233gz0ry9n7sj2uduredwtykw2ec3fs8fqrjkz8agg2xj8t9wden6spzdfcl7jlw4rgzv4hjqvh4cw40yhh8udv5g6vd0jhhfmqevezq0zs4x2q2m7u0hq9mkvulj950t9a5tcm6suycdlaky8t568jevkn3tf9uu5laevjumvahk4cxjxam85kq0l5qrycnmdzgvm7hr8cvl8a7qzcmjkwh48krtxtduhcfn7hvt752slm0nvth0yf35jugxg7ah2kw5emcq4mk962eypxyvwahf4k5ql8376l5za4zvv2p7jzgkjjs4lc60nv3czmdmmc0qn5mwnlnaxmwazs3qzfea0z0sn3nflp8v2lwlczljxre975fnvw3vfyrrjze4wuxtkjg7j37fph\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrcxyqqqqqqqqq8yvgqqqqqqqqqndesqqqqqqqqpg56qqqqqqqqqqhyyqqqqqqqqqqvqqqqqqqqqqq9a3p0z8q2qzsgq6lsd3zeh3tvezv0d2wg9tykutk9s7dat8uyamgxv54vv5le5slhta92cs08905qy0mgfdx0r7hzc7ec4qn8wmkx2cvtrwggad5h898kkp20eheukemkhj6g37flhpmxq9hpk9q2kfcsr58ufzupqpgfthzxsrn0554ttqckrgfwjfnvpfqhy4evahxkzahkf85pqt0es3j5jc2kzpkcu4ausrm4k53evjtuy3tzc3jgwl7y5t79j0ddhprs6ls9x0qpvqggvkffjg0psvjrmf2rsw5xrdnmqxlx5qru82dsavaka5kfsvxgyrzdf4tzceghyeqpk55308pkc0sg63sgwt8fywksccjdkkrqkh00kgraeuq97zsydp9z6pagtqmaply94dacmk7qkgg5jt36exjxcjdckjgswc5agg9xd4lqmpxxmtur7d7ecvvpg5rg4mzlf65hlpeynczqwdgrdekx7m3n4ljumgezxyzq7h9wmnrqfawayl5gns8gv2jaucwc9qmcq7pj6kvddw8dgpdf0rh66a6erzj9fmupu8ulc2x64092k5sfdm6rlaktdv8fscn8wlct0p9xahl2qqnxsw3tfzms5xplll4xamrlhtjm2xfsqmx62er2lmmzn6wk8788hcpg7uetlrufwlvmapeh00h9aqql6ggsknvwt45wjmfkky7z5ukly3dpjqvqt3yl839d8flcx6kpf5vqvdm57kqdwjazcmfn4ae87yqg08dlw805prfrfjvlyff3kq09z2yxc0pcaqalj7r4e6lygruk2ezpkfjlslyjtek6rtgvfwavqa5pmp6jgmr8xzu5dk0lcmfgm0plw8jkwt60pz2scpuh78k7f4dlfp7grjpn3xtdphhsn0k8rpfwqq3qr6huef2asc990ragxknla7kdl76xr2g2vl8pnql3f58wgcptked7rgeah8\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqq0huqpqqqqqqqqjvksgqqqqqqqqnypqgqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqxsh33gk03qelqrvy0g5m2km5vfhs6flwsutadvdl3nd82a3xqunx8pgaccs2yh654tpnanywulgvpvfxuma59ufttju8mvnpmuhg720p6fawv4ynhe75vfhn3te00saqpd5kpgxw59gf4r3ng3z0hr49gpwlwgkac7zlqk7cne5xh33m96qep9xeu2nf68dye57yqrnqgtaa2vk3ldcpurjn3s4pavzde8cehsrqn57qm2ewew3t4g6css5qzgfywdkkrx0rmz5u68cxvrwaksjd4s2exerl3u7cae58tc383yzd5tqxk66xqldl3ch8ymq73jhufwfcp4r8vcynmjenzt355a3qnejfndw7v5sn9a63wrd86rczgrp8wsuqsth7346q3qgaddsj6ln92233jjvke2krn809qvt8ev940hfclr5etza54055m8upn5jhg224v27cqamjy5lv3qm5nyc9asy0tqz0xsgmkuyp75t2qgv3h9s4av3u5tpmf8qkf7k7gp8rjlf67uncphscspvlmku59mgn4cqlxqqz3qdsyycs2my3emuyj9vnzt0464rfgnnmxwnw4kkqe50f764fjauj73kqcsxzn5mecv507xnetxvhfkt79r6hfvf6nzl735xtfp4r7uxlns3dazwj9mgl4fayzv0nqprh80ydqtq9tl6ffcmav2mlsky8tdrunewu3z8a2qg5wfhxz4j0xsqzfsr50ts63g0wysvnkt4rd6equa0r6fsqhrsjft0qy4jnstawrmnj28llqfgemj868y6aaw5rjftgp5vezg7r2c4q5zeupt4gghwand0jeyv5qfnxtnzh7wflxh7tdd0q6zh2fy635xhmllux8hk946t3kzenmc0355mz309gfachp2verz2qaepxsrj63nr54uga9eh2xcgp85v90dellhsvyx73m2w2qyed52svs62ysg7e3ag\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqz2cvqqqqqqqqqx0scqqqqqqqqqc42qzqqqqqqqpvmfqyqqqqqqqquzwqgqqqqqqqqvqqqqqqqqqqqpz6knqjfm77py0mpx68rmc6yavzrjpn3vdn5rmhum6u47fxt3j7auv5mk8epjx0hsa7nfm4llzwqqj84x9cnerm5gach0nzfy0jsvfrylvld5ffe8g63nhw5qng68rs6yrlzrc5229ezc8j4n4y0f2hrqqmdphh3mpglur7evq52n6mx9nls064fpn8wr3vqz75vextjhjmpvcrgs8har5txjnh9tj8lmlusns8nklkw8dh8nc8sv0llh4cgw95l3m7mwugu5nfrrlmyccnmrues4wl0hdfwsq8wvn60y2hl036g3aqzh5cn6n2366fy4hawjn22mj86w2w7twq80pdrea6svl7uq5zyh9nz4qgd72tql95n2xx0zh3wcjyqca5wzv4276exszaunpjduuvjmture49av40ve03akc9qw709wuf9a8hhpwlwwz8acf2z5ngk2d95qzfqhkmllqx4lnupyevkn8zthgu54x55t4cqm7uvmmnu3vtvkmsr4tldemm26shwk8ux27v6lmxkqppuesjj5d3m7x5rsg7yn8cg6hkat6fy8u8zj3n0z26ehqvmq8x2fadtw5jt6pxxfp3cm40ak7x9yqym5qrwjzpr7xwr4t6pjn5ca9g02hnuyvxd9jqpv70a7w05mqatnyzhnfl462xmsehgcwczjkrzz2qxk3wa0elrnvnh9qlz3cc2g8xyag9yrds0jepsvskl55zqtntp6qvkj9nkmlercd95j8g9xdgxv0sq0y6gq32ng5r9zcs4wt3vryhldxtr9epyz5vnnx4mf2lhv4r56mftaugjemxezpjcv9enr259tf7qq66a7ngsc3y0a5jlm8jg2rnd9c38ny2m5egl7ssx62zcscztkmjqpkvta2za4ym5jkatgzd2zspfcrc7gesjxjgcvhsua3jpyzpdan6mestyqsx5eatkmzv9zmpwkur3c34sjzc\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqvccqqqqqqqqqz43sqqqqqqqqq7jqqzqqqqqqqpj4vqyqqqqqqqq0zuqgqqqqqqqqvqqqqqqqqqqqyvnz4pl9kjr0ks3dtkz67gw8tyqzs3sxskt8xg6keqrrqk9nj3e39kg65lzz5sd5tug2ecrpmfg5peseqmv709nry8up96qwsuvpp8684njpe4qunfhf7ywc0a7lck9rdlfcred8krn60lgztx4wlrlmspnnkwe9gmqk07tt5lj3wxcpucpshz7ec6w5mqvspprmu88lr9tr9e7a9fqdye0jdajq46pt35hdjsruamruf6v73fu68hv5fcsndmfq3c65yjrmljfg3343vj8cca2js2gumrks9eepm3d7g02jw0se9eqpaj86kpscxu4vuvw7jedgt2c0l4fk5zqwdu3vfhrazjwedl5d0n9w75ky0924qjjzg3c04dw7p8uqxqnuph6d3d935zqavxtte336jmnpk0hkjn80cejqfljl7w6jtnl3tedhtdk4cx207c7lud9xagzcp760x47h3hrw68syru4rnr3zgy99wcpnglpjvndzrjpc3z8c53xyqx0jh8cnt6gn92fgqu8a5huespxgnckqgttq8aa7xngxt9f5lpq2zgakfhtfvhlcy66k3depln3x67ck2m9t0fvnetjygj6h2er2fqqwcf2ghjp5fvq4e68635ql0lv5uv4c82575dcv87a0y8745g6gvjenh49zppsekc82dect9ggp3aqxqnc73dmd38pe4x7v9wwv6namfe7337tczyfz47dyxxzy8fslktv47yn8r87n0nap5qlc9gzgd2yq8m6zj0ulzgaqls2dq2atkfzxu5rjguvcjxnmn7hr8uxgxuzrwtmcftz4emn24vpq5pcwxf29a7w5p80e7f2tv7ags5k0pj9fghaklzm5xrakpsk3gv4xzvzqj6u2denjw60q777r5889xqrvchhtac4xspue4mncvgerscq4dslzkt4mg4zuv6t6gahcvnm2p6r02ns62xsdexs8jxt\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrwjvqqqqqqqqqgpycqqqqqqqqquvvqzqqqqqqqqceuqyqqqqqqqqyd6qqqqqqqqqqvqqqqqqqqqqqr8z97pzqh2lxcc4tasdu784svuk6lv62sj78flptnzqks3hyu42ymryngdzr2mw6j4nxm4cmx8tgqnfzdkccekds6nhs4c7t2hf84d38jkuufdrf43ls4zm9htqarx9mv3gswcxp74kelgy36yhpsrfkgzdr8vy8580sulvaw36pxjjv0j543rml679z305kt2ju3wzarmsukzkfp56qnc0pjuptzajkes95uspd0uz3fd9fu5vmxwfwq9cj5qh0yjq398h729yygdm0fzkrl9g6faevalks3yc7xl3le38k77t3exqqnn82yyjpunpn763s8hkaguvn67jehqcvt8tvhql8skpesm9tm2hgeryk934h8c8cdcgynjq5cj2qer7kkjc2rrmg5j6agac0ya88up0sl2skxsvkw0rgxlgxjtjqc4g8c3xssq2sk6e2dufvc480rj8vqcrhtqsjqdkzq3nanlvngrjxchnzwfywwjphj5jeza2lyynrk5awz8v6jtwgxu2fs6uqrykz5lz6qpt2dfs670clhjpagxny40nmgeqtf9w8hu4v7yjpgwpv89v05u2ahdryu4538augkjhdx3hvfahwuszd8zyqmcxhrcq039hcrkd5qgadhj257vvrf27dwu64kl0j237efzvt5d360umxw3xk6tej5cxv9zqxqzc7ryqndhttaw5act9kwt8kvxtdjnzy99q8gzmg2429f94h6csrqejzc4n40xjcsdwn98hdekyqzytrh35w6t3r5d86kqt897kv5mldx9w06h4rldk734hvn096gt7e4smleja7canyfpv798cksshgq7hkyt6elvzp3rpj9nd84ykt9lzgjsswn4y8934ay3575u3sx7mkeuca0zsere2q0jmlsl6w6v2qcq424uhnmqn9q5vw22jgy94pry2junps40ug867d79h2zvd0n02nmlz05hd\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq79uqqqqqqqqqp2tcqqqqqqqqqwd4qqqqqqqqqp5ydqqqqqqqqqqvyqqqqqqqqqqqvqqqqqqqqqqqre7drur40rst43dq9at346py7hkmrhexarf59f2tjt4stlsdj5uwrgnrkjjej7jf3djk2w4njtxcq0mezac793craujm8mr7wutcqtu2aday5g03wl0cu2572fsrtpyjhdyqlh0447z7dshlkhksjsusgp4ezrvc0n64fwetfmml3kvfg7n03w2e602sl7et4cpw98hgpzxwzrmzu8r3x77v49njysy2lp55xsqh6t5qjvhyl5a7nzy3e73y7dzvvs9p450u0s8g84prqnrk6jeah89c6882uzqdvxgzcedfmsc43uq99n3ycrjh70ys8n02pyvdvzmu7z608desdd5yw9dc8v3ddrdddmrzz2pupe09yn9esy25cfzmd0wqcgjdxm4dvlt2t6k66lw8e9ccj49qj2ahpht62kh7p56xpvpekenq2arng2t55mwxe59mqpkp6a0yqlwt7tdf98rt3kqlr9tdtq6hua3wrka0mqzhva4nhucxn9u4w92mly69jy2c7cqm5ftnk3m0qxy9spaxwfz0xkqd947yvf2zh8h4y59fltxdpeu4utpv9zw0cr7ad9d462qxyc2f05lezw6dwhcmep942qqv38lp3x9efestt5pk8rplvmrk0zz9zel48l8h9ldfzyd8zyr7knze92cdyanez6k7q5fu6tnw9wqrywjnhevaujz20xn0h3n47g85zs6ejfh7z8jt9qjesqgmdymvcxlceudkdsl49t5r69c4mg7hfwyq88z7zn0efda8fdjmhz8aaq24q34g2ekdzr5w9em3cev2ktxtmupqwltu0nh3fjzm04cy3cgnqlnqq0chzq4rs2dmfjwryxrxxgjtdcsnn9fpwykkxwfuervtznu3lmvhhpdflgwgm0xklu6c0xsxt9dfcp29w2nz6zkjetz7cqremg68eqxq86rn082czp50ldw9qkq6w3p9xxg4hrg\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrhvqqqqqqqqqq8kcqqqqqqqqqqu0xsqqqqqqqqqw0kqqqqqqqqqreg7qqqqqqqqqqvqqqqqqqqqqqta360tn6dhv5z559ejfahwq88lxtd498py5p3vw5u3rwtfvdzpxq7fuqdahsrennq80g8yc6wqjyq8ahdv3jzry0mxceed0jr2cd0wye3e7782pg3phsu8h7hcapfgdghcgg2ykfc2682xefhsp3plqnqp692097k4ja82ecc2descl4d6csug04cz2j9a5pk3djx6xde2ghgq7uqvuhsg47ksueeetvc7mh2qpvqjmph9eekp5waqunkeea9vkvzyl8culmn5t7l9ke3r7uz8v5r8njjdkug6va9vy6axx9aq2kxaqdd9ll2m3j7qg7eyq3k2pnhq7gx2kv8vm3yf5pyqtywt2hvur5uv45y5st53qh970dktd3k709d9sqwv0d6qaksxjcp2cxu282hcewhy66vfs5kp35e6k4shdmjzmglyqqcsnupv8xwdr3596qypzshnuuq8rpm8pyjwtws63wsazqt8tlqhkkxucf0zjc384wvv2jemdnjwd6hn9745h8qc4kqp0rzs9wkx0hcp22xzuyyk7gpsc9ahw7pdenpje3etp37lfrcuntehl8wm2eudrh0j04szjzrv0n3r2gv04mgau5ysqtdcddq44xtt6t6f08c9zuhqukk8zy75jru0exufnh74u97d4xwe005ug7ywmcnyz8u6nvdav2xxqqzpg0luhghl8xu7g0cjgxse0lnqqedc7cc47nc048h2t44gedjq7f49ghajc9gwclp962v4q2855qvgdtkmr29cpwwq8vghlcjv0g6k0a0xa8yrmmnd5l7umnuqcd4x9rcejc3mkjgpw8y6mue2n5tx9cpahnw37yey5k38j98dnr9jss00420jvk7nh59hul7ef69n8ktcltl8f0t93rya5y8d2cspyjp6c7crvg2d4m37z78dualsqr9u7vtge07psdtl4l9785fxl3wgf9u277puvgvuq\",\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { Transaction } from \"./models/transaction\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    PrivateKey,\n    ViewKey,\n    Address,\n    PrivateKeyCiphertext,\n    RecordCiphertext,\n    Signature,\n    ProvingKey,\n    VerifyingKey,\n    Program,\n    RecordPlaintext,\n    Transaction as WasmTransaction,\n    ExecutionResponse,\n    ProgramManager as ProgramManagerBase,\n    verifyFunctionExecution,\n    initThreadPool,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    Transaction,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import * as aleo from \"@aleohq/sdk\";\n\nawait aleo.initThreadPool();\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\n\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = await programManager.synthesizeKeys(localProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.executeOffline(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    false,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                let execution = response.getExecution();\n                if (execution) {\n                    aleo.verifyFunctionExecution(execution, keyProvider.getKeys(cacheKey)[1], program, \"hello\");\n                    execution = execution.toString();\n                    console.log(\"Execution verified successfully: \" + execution);\n                } else {\n                    execution = \"\";\n                }\n\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs: {outputs: outputs, execution: execution}\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(remoteProgram, aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute(\n                    program_id,\n                    aleoFunction,\n                    fee,\n                    privateFee,\n                    inputs,\n                    undefined,\n                    keyParams,\n                    feeRecord,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, privateKey, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey);\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = await programManager.synthesizeKeys(program.toString(), aleoFunction, inputs, privateKeyObject);\n                    programManager.keyProvider.cacheKeys(cacheKey, keys);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await aleo.ProgramManagerBase.estimateExecutionFee(\n                    privateKeyObject,\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcredits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await aleo.ProgramManagerBase.estimateDeploymentFee(\n                        program,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            privateFee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    privateFee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, privateFee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, privateFee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    privateFee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["async","get","url","response","fetch","ok","Error","status","post","options","method","AleoNetworkClient","host","account","constructor","this","setAccount","getAccount","setHost","fetchData","json","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","value","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","transition_id","submitTransaction","transaction_string","Transaction","body","headers","message","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","inclusion","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","e","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","execute","programName","functionName","inputs","keySearchParams","executionPrivateKey","buildExecutionTransaction","executeOffline","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","transfer","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferTransaction","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Set","_regeneratorRuntime","t","r","Object","prototype","n","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","arguments","apply","err","aleo","defaultHost","programManager","postMessage","lastLocalProgram","addEventListener","ev","_ev$data","localProgram","aleoFunction","startTime","performance","now","_callee","privateKeyObject","program_id","keyParams","_context","hasFunction","concat","getOutputs","t0","errorMessage","_ev$data2","remoteProgram","_callee2","_context2","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","transfer_type","_callee5","_context5","transferTransaction","_ev$data6","_callee6","programExists","_context6","deployTransaction","t1","_ev$data7","_callee7","_context7","splitTransaction","_ev$data8","_callee8","_context8","joinTransaction"],"sourceRoot":""}